#!/bin/bash

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "Error: Not in a git repository"
  exit 1
fi

# Get the default branch (usually main or master)
DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs)

if [ -z "$DEFAULT_BRANCH" ]; then
  echo "Error: Could not determine default branch"
  exit 1
fi

# Make sure we're on the default branch
CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
if [ "$CURRENT_BRANCH" != "$DEFAULT_BRANCH" ]; then
  echo "Switching to $DEFAULT_BRANCH branch..."
  git checkout $DEFAULT_BRANCH
fi

# Update the default branch
echo "Updating $DEFAULT_BRANCH from remote..."
git pull origin $DEFAULT_BRANCH

# Delete all local branches that have been merged into the default branch
echo "Cleaning up merged branches..."
git branch --merged $DEFAULT_BRANCH | grep -v "\* $DEFAULT_BRANCH" | xargs -r git branch -d

# Delete all remote-tracking branches that no longer exist on the remote
echo "Pruning remote-tracking branches..."
git fetch --prune origin

# Get a list of all local branches
LOCAL_BRANCHES=$(git branch | cut -c 3-)

# Check each local branch
echo "Checking for stale branches..."
for branch in $LOCAL_BRANCHES; do
  # Skip the default branch
  if [ "$branch" == "$DEFAULT_BRANCH" ]; then
    continue
  fi
  
  # Check if the branch has a remote counterpart
  if git branch -r | grep -q "origin/$branch"; then
    continue
  fi
  
  # Check when the branch was last committed to
  LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=relative $branch)
  echo "Branch '$branch' has no remote and was last modified $LAST_COMMIT_DATE"
  
  # Ask if the user wants to delete this branch
  read -p "Delete branch '$branch'? (y/N) " response
  if [[ "$response" =~ ^[Yy] ]]; then
    git branch -D $branch
  fi
done

echo "Git cleanup complete!"