#!/usr/bin/env bash

set -euo pipefail

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to display usage
usage() {
    echo "Usage: $0 TICKET [OPTIONS]"
    echo "Extract command history for a specific ticket from atuin"
    echo ""
    echo "Arguments:"
    echo "  TICKET                 Ticket number (e.g., fraas-25857)"
    echo ""
    echo "Options:"
    echo "  -o, --output FILE      Save history to file"
    echo "  -f, --format FORMAT    Output format: plain, markdown (default: plain)"
    echo "  -h, --help             Display this help message"
    exit 1
}

# Main function
main() {
    local ticket=""
    local output_file=""
    local format="plain"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -o|--output)
                output_file="$2"
                shift 2
                ;;
            -f|--format)
                format="$2"
                shift 2
                ;;
            -h|--help)
                usage
                ;;
            -*)
                echo -e "${RED}Unknown option: $1${NC}"
                usage
                ;;
            *)
                ticket="$1"
                shift
                ;;
        esac
    done
    
    # Validate ticket
    if [ -z "$ticket" ]; then
        echo -e "${RED}Error: No ticket provided${NC}" >&2
        usage
    fi
    
    # Check if atuin is available
    if ! command -v atuin >/dev/null 2>&1; then
        echo -e "${RED}Error: atuin is not installed${NC}" >&2
        exit 1
    fi
    
    echo -e "${BLUE}Extracting command history for ticket: $ticket${NC}"
    
    # Extract history using atuin's actual capabilities
    local history=""
    
    # Check if we have a saved session ID for this ticket
    local session_file="$HOME/.config/sre/sessions/$ticket"
    if [ -f "$session_file" ]; then
        local session_id=$(cat "$session_file")
        echo -e "${BLUE}Using saved session ID: $session_id${NC}"
        # Note: Atuin doesn't support filtering by specific session ID via CLI
        # You would need to use the interactive search (Ctrl-R) and switch to session mode
    fi
    
    # Find the worktree directory and get its history
    local worktree_path=""
    local repo_base="$HOME/src/${REPO_OWNER:-owner}/${REPO_NAME:-repo}"
    
    # Parse ticket to get type
    if [[ "$ticket" =~ ^([a-zA-Z]+)-([0-9]+)$ ]]; then
        local ticket_type="${BASH_REMATCH[1],,}"
        worktree_path="$repo_base/$ticket_type/$ticket"
    fi
    
    # Check if worktree exists
    if [ -n "$worktree_path" ] && [ -d "$worktree_path" ]; then
        echo -e "${BLUE}Getting command history from directory: $worktree_path${NC}"
        # Change to the directory and run atuin list with --cwd flag
        history=$(cd "$worktree_path" && atuin history list --cwd --limit 1000 2>/dev/null || echo "")
    else
        echo -e "${YELLOW}Worktree not found for ticket: $ticket${NC}"
        echo -e "${YELLOW}Expected at: $worktree_path${NC}"
        exit 0
    fi
    
    if [ -z "$history" ]; then
        echo -e "${YELLOW}No command history found for ticket: $ticket${NC}"
        echo -e "${YELLOW}Note: Command history tracking requires atuin to be properly configured${NC}"
        exit 0
    fi
    
    # Format output
    case "$format" in
        markdown)
            output="# Command History for $ticket\n\n"
            output+="Generated on: $(date)\n\n"
            output+="Commands containing '$ticket':\n\n"
            output+="\`\`\`bash\n"
            output+="$history\n"
            output+="\`\`\`\n"
            ;;
        plain|*)
            output="Command History for $ticket\n"
            output+="Generated on: $(date)\n"
            output+="=====================================\n\n"
            output+="Commands containing '$ticket':\n\n"
            output+="$history\n"
            ;;
    esac
    
    # Output results
    if [ -n "$output_file" ]; then
        echo -e "$output" > "$output_file"
        echo -e "${GREEN}History saved to: $output_file${NC}"
    else
        echo -e "$output"
    fi
}

# Run main function
main "$@"